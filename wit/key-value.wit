interface key-value {
  type value = list<u8>;

  resource store {
    /// Open the store with the specified name.
    ///
    /// `error::no-such-store` will be raised if the `name` is not recognized.
    open: static func(name: string) -> result<store, error>;
    /// Get the value associated with the specified `key`
    ///
    /// Returns `ok(none)` if the key does not exist.
    get: func(key: string) -> result<option<value>, error>;
    /// Get the values associated with the specified `key` stored in sorted set orderd by u32 index
    ///
    /// Returns empty `Vec` if the key does not exist or min and max are out of index.
    get-by-range: func(key: string, min: u32, max: u32) -> result<list<value>, error>;
    /// Determines whether a given item was added to a Bloom filter.
    ///
    /// Returns one of these replies: 'true' means that, with high probability, item was already added to the filter,
    /// and 'false' means that key does not exist or that item had not been added to the filter.
    bf-exists: func(bf: string, key: string) -> result<bool, error>;
  }

  /// The set of errors which may be raised by functions in this interface
  variant error {
    /// The host does not recognize the store label requested.
    no-such-store,
    /// The requesting component does not have access to the specified store
    /// (which may or may not exist).
    access-denied,
    /// Some implementation-specific error has occurred (e.g. I/O)
    other(string)
  }
}